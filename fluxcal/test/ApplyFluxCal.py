"""
ApplyFluxCal.py

Created by Seth Meeker on 2012-10-31

Stand-alone routine to apply the sensitivity curves generated by GetFluxCal.py
Kludged together for preliminary analysis of Lick 2012 data.

Reads in an obs file and wave cal soln, converts to flux units of [ergs] and normalizes.
Then multiplies every pixels spectrum by its sensitivity curve and outputs the final flux calibrated spectrum in a .txt file

Cal path and sensitivity curve path are currently hardcoded as the users choice. Since this is not creating any final products it does not clutter public space on turk.

Call from command line with:
> python ApplyFluxCal.py 'datapath' 'datafile' 'calfile' 'title'

"""

import sys
import time
import struct
import os
from os.path import isfile
#import installed libraries
import numpy as np
import matplotlib
matplotlib.use('PDF')
import matplotlib.pyplot as plt
from tables import *
from matplotlib.backends.backend_pdf import PdfPages

herg = 6.6260696E-27 #erg*s
hev = 4.1356675E-15 #eV*s
c = 3.00E18 #Ang/s

fluxpath = "/home/srmeeker/FluxCal/SensitivitySpectra/"
calpath = "/ScienceData/waveCalSolnFiles/"

####-----final version will use this format-----####
if (len(sys.argv) < 5):
    print "Syntax is:  >>> python ApplyFluxCal.py 'datapath' 'datafile' 'calfile' 'title'"
    sys.exit(1)

datapath = str(sys.argv[1])
calfile = str(sys.argv[3])
datafile = str(sys.argv[2])
title = str(sys.argv[4])
####--------------------------------------------####

halfname = datafile.split('_')[1]
basename = halfname.split('.')[0]

outpath = "/home/srmeeker/FluxCal/%s/"%(basename)
if not os.path.exists(outpath):
    os.mkdir(outpath)
    print "made new directory for %s"%(basename)
junkpath = outpath
junkfile = "junkplots.ps"

#read in energy scaling file
try:
    calh5 = openFile(str(calpath+calfile),'r')
except:
    print "unable to open wavelength cal file"
    sys.exit()
caltable = calh5.root.wavecal.calsoln.read()
calh5.close()

#read in our data file
try:
    h5file = openFile(str(datapath+datafile), 'r')
except:
    print "unable to open calibration star observation file"
    sys.exit()

bmap = h5file.root.beammap.beamimage.read()
nxpix = np.shape(bmap)[1]
nypix = np.shape(bmap)[0]

for l in xrange(len(caltable)):

    roachnum = caltable[l][4]
    pixelnum = caltable[l][1]

    print "\n-----------------------------\n"
    print l
    print "cal pixel /r%s/p%s"%(roachnum,pixelnum)
    if not isfile(fluxpath+'r%i_p%i_sensitivity.txt'%(roachnum,pixelnum)):
        print "pixel does not have a sensitivity spectrum"
        continue
    x=caltable[l][0]
    y=caltable[l][2]
    xoff = caltable[l][3][0]
    yoff = caltable[l][3][1]
    amp = caltable[l][3][2]
    flag = caltable[l][7]
    print "(%i,%i)"%(x,y)
    print "flag= ", flag
    if flag!=0:
        print "bad calibration"
        print "skipping...."
        continue

    #read in sensitivity spectrum
    scalefile = "r%i_p%i_sensitivity.txt"%(roachnum,pixelnum)
    fname = fluxpath + scalefile
    fdata = np.loadtxt(fname,dtype=float)
    wl = fdata[::,0]
    sensitivity = fdata[::,1]

    print "bmap pixel", (str(bmap[y][x]))
    photons= np.concatenate(h5file.root._f_getChild(bmap[y][x])[:])
    peakheights= np.right_shift(photons,32)%4096
    parabheights= np.right_shift(photons,44)%4096
    baseline= np.right_shift(photons,20)%4096
    obsheights = np.array(parabheights,dtype=float)-np.array(baseline,dtype=float)
    #apply scaling polynomial to convert pulse heights to wavelength in Angstroms
    ev = amp*(obsheights-xoff)**2 + yoff
    for v in xrange(len(ev)):
        if ev[v] <= 0.5:
            ev[v] = 0.5
    lambdas = (hev*c)/ev
    reallambdas = np.where(lambdas>=1000) #cut out photons less than 1000 Angstroms
    lambdas = lambdas[reallambdas]
    reallambdas = np.where(lambdas<=20000) #cut out photons greater than 20,000 Angs
    lambdas = lambdas[reallambdas]

    if len(lambdas) == 0:
        print "BAD CAL/WRONG FLAG: 1ST WL-CUT REMOVED ALL PHOTONS"
        print "skipping...."
        continue

    #make histogram of obsheights
    #nobsbins = obsheights.max() - obsheights.min()
    #obshist,obsbins = np.histogram(obsheights,bins=nobsbins,range=(obsheights.min(),obsheights.max()))
    #obshist = obshist/float(obshist.max())

    #make histogram of lambdas, now a spectrum in flux units of [counts]
    nlambins = abs(lambdas.max()-lambdas.min())
    
    try:
        rawlamhist,rawlambins = np.histogram(lambdas,bins=nlambins,range=(lambdas.min(),lambdas.max()))
        indices = np.where(rawlamhist != 0)
        rawlamhist = rawlamhist[indices]
        rawlambins = rawlambins[indices]
    except ValueError:
        print "BAD CAL/WRONG FLAG: ONLY 1 HISTOGRAM BIN"
        print "skipping...."
        continue

    #convert lamhist from histogram of flux in counts to flux in ergs
    n2erg = herg*c/rawlambins
    rawlamhist = rawlamhist*n2erg
    lamhist = rawlamhist

    #normalize
    #lamhist = rawlamhist/float(rawlamhist.max())
    #rawlamhist = rawlamhist/float(rawlamhist.max())

    #make test plots
    pp = PdfPages(outpath+'r%i_p%i_spectrum.pdf'%(roachnum, pixelnum))
    matplotlib.rcParams['font.size']=6

    plt.figure()
    #ax1 = plt.subplot(321)
    #ax1.set_title('obshist')
    #plt.plot(obsbins[:-1],obshist)
    #plt.show()
    ax1 = plt.subplot(321)
    ax1.set_title('data flux in counts')
    plt.plot(rawlambins,rawlamhist)
    ax2 = plt.subplot(322)
    ax2.set_title('sensitivity spectrum')
    plt.plot(wl,sensitivity)
    #plt.show()

    #cut spectrum to same wavelength range as scaling
    lmin = np.max([rawlambins.min(),wl.min()])
    lmax = np.min([rawlambins.max(),wl.max()])

    try:
        indmin = np.where(wl >= lmin)[0][0]
        indmax = np.where(wl <= lmax)[0][-1]
        wl = wl[indmin:indmax]
        sensitivity = sensitivity[indmin:indmax]
        indmin = np.where(rawlambins >= lmin)[0][0]
        indmax = np.where(rawlambins <= lmax)[0][-1]
        lambins = rawlambins[indmin:indmax]
        lamhist = lamhist[indmin:indmax]
    except IndexError:
        print "BAD CAL/WRONG FLAG: DATA WL RANGE OUTSIDE FLUX CAL WL RANGE"
        print "skipping...."
        pp.savefig()
        pp.close()
        continue

    #more test plots
    ax5 = plt.subplot(323)
    ax5.set_title('wl cut counts')
    plt.plot(lambins,lamhist)
    #plt.show()
    ax6 = plt.subplot(324)
    ax6.set_title('cut sensitivity spectrum')
    plt.plot(wl,sensitivity)
    #plt.show()

    if len(lambins) == 0:
        print "BAD CAL/WRONG FLAG: 2ND WL-CUT REMOVED ALL PHOTONS"
        print "skipping...."
        pp.savefig()
        pp.close()
        continue

    #interpolate measured spectrum to same wl grid as real spectrum
    newgrid = xrange(int(lmax-lmin)) + lmin
    newhist = np.interp(newgrid,lambins,lamhist)
    sensitivity = np.interp(newgrid, wl,sensitivity)

    #more test plots
    ax7 = plt.subplot(325)
    ax7.set_title('interp\'d lambdas')
    plt.plot(newgrid,newhist)
    #plt.show()
    #ax8 = plt.subplot(326)
    #ax8.set_title('interp\'d spectrum')
    #plt.plot(newgrid,newflux)
    #plt.show()

    #check flux calibration on original data
    newrawhist = np.interp(newgrid,rawlambins[indmin:indmax],rawlamhist[indmin:indmax])
    fluxcalibrated = sensitivity*newrawhist

    ax10 = plt.subplot(326)
    ax10.set_title('flux calibrated spectrum')
    plt.plot(newgrid, fluxcalibrated)
    plt.show()

    outarr = np.empty((len(newgrid),2),dtype=float)
    outarr[:,0]=newgrid
    outarr[:,1]=fluxcalibrated
    #save spectrum to file
    fname = str(outpath+'r%i_p%i_spectrum.txt'%(roachnum,pixelnum))
    np.savetxt(fname, outarr)

    #plt.legend()
    pp.savefig()
    pp.close()

    #make test plots
    pp = PdfPages(outpath+'r%i_p%i_final.pdf'%(roachnum, pixelnum))
    matplotlib.rcParams['font.size']=6

    plt.figure()
    ax10 = plt.subplot(111)
    ax10.set_title(title)
    ax10.set_xlabel('Wavelength (Angstroms)')
    ax10.set_ylabel('Normalized Flux')
    plt.plot(newgrid, fluxcalibrated)
    pp.savefig()
    pp.close()

h5file.close()
print "\n-------------------\n"
print "FINISHED FLUX CAL ON ", datafile
print "\n--------------------\n"

